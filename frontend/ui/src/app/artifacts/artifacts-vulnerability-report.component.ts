import {CVSS20, CVSS30, CVSS40} from '@pandatix/js-cvss';
import {Vulnerability, VulnerabilitySeverity} from '../services/artifacts.service';
import {NgPlural, NgPluralCase} from '@angular/common';
import {Component, input, computed} from '@angular/core';
import {FaIconComponent} from '@fortawesome/angular-fontawesome';
import {faExclamationTriangle} from '@fortawesome/free-solid-svg-icons';
import {RelativeDatePipe} from '../../util/dates';

@Component({
  selector: 'app-artifacts-vulnerability-report',
  imports: [NgPlural, NgPluralCase, FaIconComponent, RelativeDatePipe],
  template: `
    <details class="border border-transparent open:border-gray-200 dark:open:border-gray-700 rounded-lg px-4 open:pb-2">
      <summary class="select-none">
        @if (criticalVulns().length; as l) {
          <span class="text-red-800 dark:text-red-400">
            <fa-icon [icon]="faExclamationTriangle"></fa-icon>
            {{ l }} critical
            <ng-container [ngPlural]="l">
              <ng-template ngPluralCase="=1">vulnerability</ng-template>
              <ng-template ngPluralCase="other">vulnerabilities</ng-template>
            </ng-container>
            ({{ vulns().length }} total)
          </span>
        } @else {
          @if (vulns().length; as l) {
            {{ l }} non-critical
            <ng-container [ngPlural]="l">
              <ng-template ngPluralCase="=1">vulnerability</ng-template>
              <ng-template ngPluralCase="other">vulnerabilities</ng-template>
            </ng-container>
          } @else {
            no vulnerabilities
          }
        }
      </summary>
      <ul class="mt-2 flex flex-col gap-1.5 text-sm">
        @for (vuln of parsedVulns(); track vuln.id) {
          <li>
            @if (vuln.maxScore >= 9) {
              <span
                title="Critical"
                class="bg-red-100 font-bold text-red-800 px-1 py-0.5 rounded-md dark:bg-gray-700 dark:text-red-400 border border-red-400"
                >{{ vuln.maxScore }}</span
              >
            } @else if (vuln.maxScore >= 7) {
              <span
                title="High"
                class="bg-red-100 text-red-800 px-1 py-0.5 rounded-md dark:bg-gray-700 dark:text-red-400 border border-red-400"
                >{{ vuln.maxScore }}</span
              >
            } @else if (vuln.maxScore >= 4) {
              <span
                title="Medium"
                class="bg-yellow-100 text-yellow-800 px-1 py-0.5 rounded-md dark:bg-gray-700 dark:text-yellow-300 border border-yellow-300"
                >{{ vuln.maxScore }}</span
              >
            } @else {
              <span
                title="Low"
                class="bg-gray-100 text-gray-800 px-1 py-0.5 rounded-md dark:bg-gray-700 dark:text-gray-400 border border-gray-500"
                >{{ vuln.maxScore }}</span
              >
            }
            {{ vuln.id }}
          </li>
        }
      </ul>
      <div class=" mt-1 text-right text-xs text-gray-800 dark:text-gray-400">scanned {{ date() | relativeDate }}</div>
    </details>
  `,
})
export class ArtifactsVulnerabilityReportComponent {
  public readonly vulns = input.required<Vulnerability[]>();
  public readonly date = input.required<string>();
  protected readonly parsedVulns = computed(() => this.vulns().map((v) => new ParsedVuln(v)));
  protected readonly criticalVulns = computed(() => this.parsedVulns().filter((vuln) => vuln.maxScore >= 9));

  protected showReport = false;

  protected readonly faExclamationTriangle = faExclamationTriangle;
}

class ParsedVuln implements Vulnerability {
  public id: string;
  public severity: ParsedSeverity[];

  public get maxScore(): number {
    return this.severity.map((it) => it.baseScore).reduce((a, b) => Math.max(a, b));
  }

  constructor(base: Vulnerability) {
    this.id = base.id;
    this.severity = base.severity.map((s) => new ParsedSeverity(s));
  }
}

class ParsedSeverity implements VulnerabilitySeverity {
  public type: 'CVSS_V2' | 'CVSS_V3' | 'CVSS_V4';
  public score: string;
  public readonly baseScore: number;

  constructor(base: VulnerabilitySeverity) {
    this.type = base.type;
    this.score = base.score;
    switch (this.type) {
      case 'CVSS_V2':
        this.baseScore = new CVSS20(this.score).BaseScore();
        break;
      case 'CVSS_V3':
        this.baseScore = new CVSS30(this.score).BaseScore();
        break;
      case 'CVSS_V4':
        this.baseScore = new CVSS40(this.score).Score();
        break;
      default:
        this.baseScore = 0;
    }
  }
}
