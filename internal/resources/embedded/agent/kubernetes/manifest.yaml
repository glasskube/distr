apiVersion: v1
kind: Secret
metadata:
  name: glasskube-cloud-agent-env
type: Opaque
stringData:
  GK_TARGET_ID: "{{ .targetId }}"
  GK_TARGET_SECRET: "{{ .targetSecret }}"
  GK_LOGIN_ENDPOINT: "{{ .loginEndpoint }}"
  GK_RESOURCE_ENDPOINT: "{{ .resourcesEndpoint }}"
  GK_STATUS_ENDPOINT: "{{ .statusEndpoint }}"
  GK_INTERVAL: "{{ .agentInterval }}"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: glasskube-cloud-agent

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: namespace-admin
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: glasskube-cloud-agent
subjects:
  - kind: ServiceAccount
    name: glasskube-cloud-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: namespace-admin

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: glasskube-cloud-agent
spec:
  selector:
    matchLabels:
      app: glasskube-cloud-agent
  template:
    metadata:
      labels:
        app: glasskube-cloud-agent
    spec:
      serviceAccountName: glasskube-cloud-agent
      securityContext:
        runAsNonRoot: true
      containers:
        - name: glasskube-cloud-agent
          image: ghcr.io/glasskube/cloud/kubernetes-agent:latest # TODO: use version tag
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: glasskube-cloud-agent-env
          resources:
            limits:
              memory: "128Mi"
              cpu: "500m"
